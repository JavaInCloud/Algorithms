Creating and Destroying Objects 

  Consider static factory methods instead of constructors
  
    ADVANTAGES:
         Unlike constructors, they have names
         They are not required to create a new object each time theyâ€™re invoked
         They can return an object of any subtype of their return type
         They reduce the verbosity of creating parameterized type instances
         
    DISADVANTAGES:
          They are not readily distinguishable from other static methods.
          Since constructors are made private , Classes without public or protected constructors cannot be subclassed
          
          
  Consider a builder when faced with many constructor parameters
  
    Scenario:
          You have plenty of parameters to create an Object. 
            Static factories will have huge parameter function. 
            Constructors will lead to telescoping constructors
          
          (ie Constructor is declared. Another one is declared with optional paramter and calls the earlier one and ..
          
            JAVABean (Setter and Getter pattern). Client needs to set each property and there are chances of using
            incomplete one. Thread safety also matters
            
            
public class NutritionFacts {
    private final int servingSize;
    private final int servings;
    private int calories;
    
    public static class Builder {
        // Required parameters
        private final int servingSize;
        private final int servings;

        // Optional parameters - initialized to default values
        private int calories      = 0;
 

        public Builder(int servingSize, int servings) {
            this.servingSize = servingSize;
            this.servings    = servings;
        }

        public Builder calories(int val)
            { calories = val;      return this; }
   
        public NutritionFacts build() {
            return new NutritionFacts(this);
        }
    }

    private NutritionFacts(Builder builder) {
        servingSize  = builder.servingSize;
        servings     = builder.servings;
        calories     = builder.calories;
        fat          = builder.fat;
        sodium       = builder.sodium;
        carbohydrate = builder.carbohydrate;
    }
}

CLIENT CODE :

NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).calories(100).build();
        
